services:
  # Banco de Dados PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: postech_blog_db
    environment:
      POSTGRES_DB: postech_blog
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postech_blog"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: postech_blog_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: postech_blog
      DB_USER: admin
      DB_PASSWORD: admin123
      JWT_SECRET: seu_jwt_secret_super_seguro_aqui
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - blog_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: postech_blog_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - blog_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes persistentes
volumes:
  postgres_data:
    driver: local

# Rede personalizada
networks:
  blog_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16